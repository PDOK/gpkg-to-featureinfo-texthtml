package main

import (
	"testing"
)

func Test_checkParameters(t *testing.T) {
	var testArg *string
	temp := "-gpkgurl http://csu338.cs.kadaster.nl:8080/geopackages/afvalwater2016/1/afvalwater.gpkg"
	testArg = &temp
	checkParameters(testArg)
}

func Test_createTmpFile(t *testing.T) {
	testFile := createTmpFile()
	if testFile == nil {
		t.Error("Could not create temporary file.")
	}
}

func Test_downloadGeopackage(t *testing.T) {
	testFile := createTmpFile()
	if testFile == nil {
		t.Error("Could not create temporary file.")
	}
	err := downloadGeopackage(testFile, "http://csu338.cs.kadaster.nl:8080/geopackages/afvalwater2016/1/afvalwater.gpkg")
	if err != nil {
		t.Error(err)
	}
}

func Test_generateHTMLForLayer(t *testing.T) {
	const expectedResult = "<!-- MapServer Template --><html><head><title>GetFeatureInfo output</title></head><style type=\"text/css\">table.featureInfo, table.featureInfo td, table.featureInfo th { border: 1px solid #ddd; border-collapse: collapse; margin: 0; padding: 0; font-size: 90%; padding: .2em .1em; } table.featureInfo th { padding: .2em .2em; font-weight: bold; background: #eee; } table.featureInfo td { background: #fff; } table.featureInfo tr.odd td { background: #eee; } table.featureInfo caption { text-align: left; font-size: 100%; font-weight: bold; padding: .2em .2em; }</style><body><table class=\"featureInfo\"><caption class=\"featureInfo\">testLayer</caption><tr><th>testColumn1</th><th>testColumn2</th></tr><tr><td>[testColumn1]</td><td>[testColumn2]</td></tr></table><br /></body></html><!-- Generated by PDOK ( https://www.pdok.nl/ ) -->"
	testColumn := []string{"testColumn1", "testColumn2", "geom", "shape_len"}
	htmlBuffer := generateHTMLForLayer("testLayer", testColumn)
	if htmlBuffer == nil {
		t.Error("No HTML was generated")
	}
	if htmlBuffer.String() != expectedResult {
		t.Errorf("Result was not OK.\nResult:\n%s.\nExpected:\n%s.", htmlBuffer.String(), expectedResult)
	}
}

func Test_checkColumn(t *testing.T) {
	badColumns := []string{"geom", "shape_len", "shape_leng", "shape_area", "Shape_Area"}
	for _, badColumn := range badColumns {
		if checkColumn(badColumn) {
			t.Errorf("%s should not be an valid column name.", badColumn)
		}
	}
}
